[
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need to schedule a meeting for tomorrow at 8 AM .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberAM :number Number 8</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho are my reports[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindReports :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\ncreate diaper change on monday at 8[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek MONDAY :time NumberPM :number Number 8 :subject ?= String diaper change</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nschedule time with Kim 's team on Saturday morning .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim :start DateTimeConstraint :constraint Morning :date NextDOW :dow DayOfWeek SATURDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho are the reports of Kim Possible ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindReports :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim Possible</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need a meeting with Abby and her skip[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby AttendeeListHasRecipient :recipient FindManager :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need to meet with Rokaru 's boss at 3 pm tomorrow about scheduling .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Rokaru :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberPM :number Number 3 :subject ?= String about scheduling</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCan you schedule a Fajita Eating Session tonight at 6 : 30 pm ?[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date Today :time HourMinutePm :hours Number 6 :minutes Number 30.0 :subject ?= String Fajita Eating Session</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nInvite my boss and his team to a party tomorrow[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser AttendeeListHasPeople :people FindTeamOf :recipient FindManager :recipient toRecipient CurrentUser :start Constraint[DateTime] :date ?= Tomorrow :subject ?= String party</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI am going to be lifting weights to 7 am and at 7 : 30 I am going to have a power breakfast .[/INST]\n\nSkill required: event creation skills\nPlan: do Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= NextTime :time NumberAM :number Number 7 :subject ?= String lifting weights Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= NextTime :time HourMinuteAm :hours Number 7 :minutes Number 30.0 :subject ?= String power breakfast</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nbasketball game 7 pm saturday[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek SATURDAY :time NumberPM :number Number 7 :subject ?= String basketball game</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nadd a working lunch with meg and her supervisor[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName meg AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName meg :subject ?= String working lunch</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need a. meeting with kim tomorrow from 1 : 30 until the end of work day .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName kim :end ?= TimeAfterDateTime :dateTime DateAtTimeWithDefaults :date Tomorrow :time HourMinutePm :hours Number 1 :minutes Number 30.0 :time EndOfWorkDay :start ?= DateAtTimeWithDefaults :date Tomorrow :time HourMinutePm :hours Number 1 :minutes Number 30.0</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMake a meeting with Jake 's team for next friday please[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jake :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek FRIDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is Darren 's manager ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Darren</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nThanks now add a flight to new york at 3 pm on the 16 th of june[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date MD :day Number 16 :month Month JUNE :time NumberPM :number Number 3 :subject ?= String flight to new york</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI will be with my team for 3 days from the 7 th to the 10 th[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint EventAllDayForDateRange :dateRange DateAndConstraint :date1 nextDayOfMonth Today Number 7 :date2 nextDayOfMonth nextDayOfMonth Today Number 7 Number 10.0 :event Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho 's on Rosenfelds team[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Rosenfeld</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCreate a meeting with Abby 's team tomorrow please[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWhat 's my boss 's name and contact info ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output PersonFromRecipient :recipient FindManager :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI am seeing Jake and his boss for Crop Whispering tomorrow at 3 pm[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jake AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jake :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberPM :number Number 3 :subject ?= String Crop Whispering</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nOk . Set a lunch meeting on Wednesday at noon .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek WEDNESDAY :time Noon :subject ?= String lunch meeting</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSchedule a morning bagel run , with my team but do n't include Dan Marton .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser AttendeeListExcludesRecipient :recipient ?= Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Dan Marton :subject ?= String morning bagel run</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSet up a round table with David Crim and David Lax and his team .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName David Crim AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName David Lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName David Lax :subject ?= String round table</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nDo I have time to schedule a meditation session this afternoon ?[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start DateTimeConstraint :constraint Afternoon :date Today :subject ?= String meditation session</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nmake a appointment today[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= Today</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCreate event on calendar Raquetball game with Jill on Friday at 5 : 00 pm .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jill :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek FRIDAY :time NumberPM :number Number 5 :subject ?= String Raquetball game</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd a from 1 : 00 pm to 2 : 00 pm with Jane 's manager[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jane :end ?= TimeAfterDateTime :dateTime NextTime :time NumberPM :number Number 1 :time NumberPM :number Number 2 :start ?= NextTime :time NumberPM :number Number 1</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is Sally Jones reporting to ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Sally Jones</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nShow my status as tentative for the rest of the week .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :nonEmptyBase EventDuringRange :event Constraint[Event] :range ThisWeek :showAs ?= ShowAsStatus Tentative</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMy name is Damon Straeter . I need to know who my manager is .[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Damon Straeter</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nmake a appointment for tomorrow[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is on Kim 's team ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nput dinner meeting with yulella 's team[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName yulella :subject ?= String dinner meeting</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nDoes Damon Straeter report to anyone ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Damon Straeter</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd a meeting for 1 hour at 9 am on Tuesday .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :duration ?= toHours Number 1 :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek TUESDAY :time NumberAM :number Number 9</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSunday I need to schedule an event Presentation review at 1 pm .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek SUNDAY :time NumberPM :number Number 1 :subject ?= String Presentation review</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nmake meeting on 3 : 00 pm[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= NextTime :time NumberPM :number Number 3</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho does Abby report to ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI also need a dental appointment tomorrow afternoon[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start DateTimeConstraint :constraint Afternoon :date Tomorrow :subject ?= String dental appointment</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI was hoping to add a meeting called Brunch on Saturday .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek SATURDAY :subject ?= String Brunch</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is Abby 's manager ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nwhen can fix a meeting with my staff[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindReports :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMake an all day meeting with my team[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :isAllDay ?= Boolean true</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCan I see Dan 's manager ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Dan</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is on Jesse 's team ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jesse</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSlot in an appointment with my team tomorrow .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSchedule movie date with Jessica at the Regal Majestic in Silver Spring , MD .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jessica :location ?= LocationKeyphrase Regal Majestic in Silver Spring :subject ?= String movie date</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCan you make an event for Fred and his supervisor for golf on Friday ?[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Fred AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Fred :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek FRIDAY :subject ?= String golf</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd the Aerosmith concert on Wednesday January 31 st to my calendar with the location .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= MD :day Number 31 :month Month JANUARY :subject ?= String Aerosmith concert</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho 's on Elli 's team now ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Elli</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCreate new appointment for tomorrow at noon with Paige Ashworth .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Paige Ashworth :start ?= DateAtTimeWithDefaults :date Tomorrow :time Noon</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nPlease set up a meeting with David Crim and his supervisor , and have Jake and his supervisor there as well .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName David Crim AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName David Crim andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jake AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jake</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI 'm going to be with Abby and her boss tomorrow[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nPut a birthday party on my calendar with my boss and my coworkers amanda , noelle and rob .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint andConstraint AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName amanda andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName noelle AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName rob :subject ?= String birthday party</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWith my team , I 'll have a meeting today .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start Constraint[DateTime] :date ?= Today</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMy team is requesting that we have a meeting on Friday .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek FRIDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nschedule a meeting with Rex tomorrow[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Rex :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\ncreate chess meet on thursday at 10[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek THURSDAY :time NumberPM :number Number 10.0 :subject ?= String chess meet</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is my supervisor . Create meeting with Dan[/INST]\n\nSkill required: organization navigation skills\nPlan: do Yield :output FindManager :recipient toRecipient CurrentUser Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Dan</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nTuesday at 3 pm , make a meeting called \" Budget \" .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek TUESDAY :time NumberPM :number Number 3 :subject ?= String Budget</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI will be with my team in Kansas tomorrow[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :location ?= LocationKeyphrase Kansas :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nYes can you please set an event starting tomorrow at 3 pm for my dentist appointment ?[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberPM :number Number 3 :subject ?= String dentist appointment</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\ncreate a schedule for football practoisde[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :subject ?= String football practoisde</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nput meet with team[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWhat 's my manager 's name ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWhat is my bosses email ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output :emailAddress PersonFromRecipient :recipient FindManager :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd dinner with Manuel 's boss for this Friday at 8 : 00 PM .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Manuel :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek FRIDAY :time NumberPM :number Number 8 :subject ?= String dinner</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nPlan a meeting with Haley , Gift and their bosses for Tuesday in my office .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Haley andConstraint andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Gift AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Haley AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Gift :location ?= LocationKeyphrase my office :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek TUESDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nmake dinner with manager tomorrow 8 . 00 to 8 . 30 pm[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser :end ?= TimeAfterDateTime :dateTime DateAtTimeWithDefaults :date Tomorrow :time NumberAM :number Number 8 :time HourMinutePm :hours Number 8 :minutes Number 30.0 :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberAM :number Number 8 :subject ?= String dinner</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd a meeting with jason and his boss about marketing .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName jason AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName jason :subject ?= String marketing</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI want to meet with Jim 's manager next week[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jim :start Constraint[DateTime] :date NextWeekList</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI also need to call my accountant 9 days before tax day to check on my taxes and that will be at noon and will probably last about 45 minutes and I need to be shown as busy[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :duration ?= toMinutes Number 45 :showAs ?= ShowAsStatus Busy :start ?= DateAtTimeWithDefaults :date PeriodBeforeDate :date NextHolidayFromToday :holiday Holiday TaxDay :period toDays Number 9 :time Noon :subject ?= String call my accountant</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need to meet with Kim and her skip manager tomorrow at 5 pm .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim AttendeeListHasRecipient :recipient FindManager :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberPM :number Number 5</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nFriday I have a meeting with coworkers at 2 pm .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek FRIDAY :time NumberPM :number Number 2</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nPlease schedule a meeting with the pope tomorrow[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName pope :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need another meeting with my team on Friday at 3 .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek FRIDAY :time NumberPM :number Number 3</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need to schedule a 1 - 1 Sunday with Jackson[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jackson :isOneOnOne ?= Boolean true :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek SUNDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is Jane 's manager ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jane</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWell add a meeting with Barack Obama at 1 : 00 pm[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Barack Obama :start Constraint[DateTime] :time ?= NumberPM :number Number 1</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSchedule a team meeting for 8 : 45 AM on Tuesday .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek TUESDAY :time HourMinuteAm :hours Number 8 :minutes Number 45 :subject ?= String team meeting</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWho is elli 's boss 's boss ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName elli</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCan you add meeting with boss at 9 : 00 for next friday ?[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek FRIDAY :time NumberAM :number Number 9</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\ncreate a lunch appointment at 12 pm .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= NextTime :time NumberPM :number Number 12 :subject ?= String lunch appointment</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd roller skating practice to my calendar on Tuesday at 7 .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek TUESDAY :time NumberPM :number Number 7 :subject ?= String roller skating practice</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nThanks . Can you also put that I will be hanging out with Jennifer , her manager , Jimmy and his boss this Saturday at 2 PM ?[/INST]\n\nSkill required: organization navigation skills\nPlan: do andConstraint andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jennifer AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jennifer andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jimmy AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jimmy Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek SATURDAY :subject ?= String hanging out</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need something tomorrow after 3 pm[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start OnDateAfterTime :date Tomorrow :time NumberPM :number Number 3</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nhow many members in my team ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindTeamOf :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need to create an event to meet with my boss tomorrow at 9 am[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberAM :number Number 9</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCreate a meeting on Thursday at 10 AM .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek THURSDAY :time NumberAM :number Number 10.0</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCan you schedule a meeting with Hunter 's boss on December 15 , 2019 sometime between 9 am and noon .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Hunter :start DateTimeAndConstraint :dateTime1 DateAtTimeWithDefaults :date MDY :day Number 15 :month Month DECEMBER :year Number 2019 :time NumberAM :number Number 9 :dateTime2 TimeAfterDateTime :dateTime DateAtTimeWithDefaults :date MDY :day Number 15 :month Month DECEMBER :year Number 2019 :time NumberAM :number Number 9 :time Noon</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\ntoday night meet my team members[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start DateTimeConstraint :constraint Night :date Today</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nOn June 6 do I have time to go to the nail sallon[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= MD :day Number 6 :month Month JUNE :subject ?= String go to the nail sallon</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd met workout goal to the current day .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= Today :subject ?= String met workout goal</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMeeting with Jim and his manager Michael on Thursday at noon[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jim AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Michael :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek THURSDAY :time Noon</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nTell me who James Potter 's manager is .[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName James Potter</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSchedule a meeting with those who report to me for Thursday afternoon .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindReports :recipient toRecipient CurrentUser :start DateTimeConstraint :constraint Afternoon :date NextDOW :dow DayOfWeek THURSDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nJane 's coming to visit next week on Saturday and Sunday .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jane :nonEmptyBase EventAllDayForDateRange :dateRange DateAndConstraint :date1 DowOfWeekNew :dow DayOfWeek SATURDAY :week NextWeekList :date2 nextDayOfWeek DowOfWeekNew :dow DayOfWeek SATURDAY :week NextWeekList DayOfWeek SUNDAY :event Constraint[Event] :subject ?= String visit</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nput on my appointment tomorrow before 7 pm[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start OnDateBeforeTime :date Tomorrow :time NumberPM :number Number 7</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nCreate an event called \" Memo \" and add my reports[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindReports :recipient toRecipient CurrentUser :subject ?= String Memo</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nalso add a Charity Event in November 2020[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date FullMonthofMonth :month Month NOVEMBER :year Number 2020.0 :subject ?= String Charity Event</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nOk . Instead add meeting with Riles and her boss .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Riles AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Riles</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI need a meeting with Abby and her boss[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\n4 PM is my dentist appointment .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= NextTime :time NumberPM :number Number 4 :subject ?= String dentist appointment</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI also need a meeting with Julie and Jody tomorrow afternoon .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Julie AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Jody :start DateTimeConstraint :constraint Afternoon :date Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\ni need a 1 hour long with Dan Schoffel[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Dan Schoffel :duration ?= toHours Number 1</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nOkay , add a one - on - one with my supervisor this afternoon[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser :isOneOnOne ?= Boolean true :start DateTimeConstraint :constraint Afternoon :date Today</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMake a party with Abby 's team and Crim[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Crim :subject ?= String party</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd on a happy hour with Megan 's team after the sales pitch coming up .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Megan :start ?= :end singleton :results FindEventWrapperWithDefaults :constraint Constraint[Event] :subject ?~= String sales pitch :subject ?= String happy hour</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nLets make a meal with my team tonight but do not invite Abby[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser AttendeeListExcludesRecipient :recipient ?= Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Abby :start DateTimeConstraint :constraint Night :date Today :subject ?= String meal</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nWhat 's my supervisors name ?[/INST]\n\nSkill required: organization navigation skills\nPlan: Yield :output FindManager :recipient toRecipient CurrentUser</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nI must go to a meeting with Chidi and his supervisor tomorrow[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Chidi AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Chidi :start Constraint[DateTime] :date ?= Tomorrow</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nPlease make an appointment with the boss for 3 pm tomorrow .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient toRecipient CurrentUser :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberPM :number Number 3</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nschedule a meeting with Kim and her skip on Monday[/INST]\n\nSkill required: compositional skills\nPlan: do PersonName Kim Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim AttendeeListHasRecipient :recipient FindManager :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Kim :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek MONDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAdd to calendar doctor 's appointment on Tuesday , December 18 @ 2 pm . Mark as out of the office for 2 hours[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :duration ?= toHours Number 2 :showAs ?= ShowAsStatus OutOfOffice :start ?= DateAtTimeWithDefaults :date MD :day Number 18 :month Month DECEMBER :time NumberPM :number Number 2 :subject ?= String doctor's appointment</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nadd swim time in the week not the weekend[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date Constraint[Date] :dayOfWeek negate Weekend :subject ?= String swim time</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nNeed to make an emergency meeting with Patricia and her boss .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Patricia AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Patricia :subject ?= String emergency meeting</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nSchedule a meeting with Mondo 's boss at his office on Tuesday at 9 : 00 .a.m .[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Mondo :location ?= LocationKeyphrase his office :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek TUESDAY :time NumberAM :number Number 9</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nThanks . Please schedule meeting with Julia tomorrow at 5 PM at Starbucks .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Julia :location ?= LocationKeyphrase Starbucks :start ?= DateAtTimeWithDefaults :date Tomorrow :time NumberPM :number Number 5</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nMark me as busy 10 - 12 .[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :end ?= TimeAfterDateTime :dateTime NextTime :time NumberAM :number Number 10.0 :time NumberPM :number Number 12 :showAs ?= ShowAsStatus Busy :start ?= NextTime :time NumberAM :number Number 10.0</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nNow add a meeting with DAn and his manager please[/INST]\n\nSkill required: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName DAn AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName DAn</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nPut a trip on my calendar for 2 days to alaska starting next monday[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :location ?= LocationKeyphrase alaska :nonEmptyBase EventAllDayStartingDateForPeriod :event Constraint[Event] :subject ?= String trip :period toDays Number 2 :startDate NextDOW :dow DayOfWeek MONDAY</s>"
    },
    {
        "text": "<s>[INST]<<SYS>>\nYou are an intelligent assistant designed to convert user utterances into actionable plans for fine-tuning. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:\n1) Identify the skills required\n    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.\n    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.\n    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills Plan usually has both 'CreateCommitEventWrapper' and 'Find'.\n2) Generate the Plan in LISP\n\nHere is on example\nUtterance: create a meeting tomorrow with david lax and his team\nSkill: compositional skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow\n\nUse this structure to create accurate and executable plans for the provided utterances. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.\n<</SYS>>\nAppointment 2 is tomorrow[/INST]\n\nSkill required: event creation skills\nPlan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start Constraint[DateTime] :date ?= Tomorrow :subject ?= String Appointment 2</s>"
    }
]