You are an intelligent assistant designed to convert user utterances into actionable plans. You will be given an utterance (a command or query) and must generate a corresponding plan (a LISP-style instruction) that describes how to execute the utterance. Follow these guidelines:

1) Identify the skills required
    Event Creation: Commands related to scheduling or managing events. Plan usually contain 'CreateCommitEventWrapper'.
    Org Chart Navigation: Queries about organizational hierarchy or relationships. Plan usually contain 'FindTeamOf' or 'FindManager' or 'FindReports'.
    Compositional Commands: Commands requiring a combination of event creation and org chart navigation skills. Plan usually has both 'CreateCommitEventWrapper' and 'Find'.

2) Generate the Plan

Here are some examples

Event Creation: 
Examples
Utterance: Schedule a meeting with Lori and Tony today after 1 pm
Skill: event creation skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Lori AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Tony :start OnDateAfterTime :date Today :time NumberPM :number Number 1

Utterance: set meeting at 3 pm sat with dan daniels
Skill: event creation skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName dan daniels :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek SATURDAY :time NumberPM :number Number 3

Utterance: Also , add calendar entry for Friday at 10 AM to go to a doctor appointment.
Skill: event creation skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :start ?= DateAtTimeWithDefaults :date NextDOW :dow DayOfWeek FRIDAY :time NumberAM :number Number 10.0 :subject ?= String go to a doctor appointment

Utterance: I am going golfing with Dave next week
Skill: event creation skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Dave :start Constraint[DateTime] :date NextWeekList :subject ?= String golfing

Org Chart Navigation: 
Examples
Utterance: Who is james manager ? 
Skill: organization navigation skills
Plan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName james

Utterance: who does jake report to then ?
Skill: organization navigation skills
Plan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName jakes

Utterance: CAN YOU CHECK WHO IS THE MANAGER OF ALBERT FORM MY CONTACTS
Skill: organization navigation skills
Plan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName ALBERT

Utterance: Does Dan have a supervisor ?
Skill: organization navigation skills
Plan: Yield :output FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName Dan

Compositional Commands: 
Examples
Utterance: I need to meet with James ' boss Thursday
Skill: compositional skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasRecipient :recipient FindManager :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName James :start Constraint[DateTime] :date ?= NextDOW :dow DayOfWeek THURSDAY

Utterance: create a meeting tomorrow with david lax and his team
Skill: compositional skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName david lax :start Constraint[DateTime] :date ?= Tomorrow

Utterance: I need put a meeting with susan and her team
Skill: compositional skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees andConstraint AttendeeListHasRecipient :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName susan AttendeeListHasPeople :people FindTeamOf :recipient Execute :intension refer extensionConstraint RecipientWithNameLike :constraint Constraint[Recipient] :name PersonName susan

Utterance: Gather my team for the pitch meeting next year .
Skill: compositional skills
Plan: Yield :output CreateCommitEventWrapper :event CreatePreflightEventWrapper :constraint Constraint[Event] :attendees AttendeeListHasPeople :people FindTeamOf :recipient toRecipient CurrentUser :start Constraint[DateTime] :date FullYearofYear :year NextYear :subject ?= String pitch meeting


Now you will be given a utterence, use above examples to first indentify the skills required and then create accurate and executable plans for the provided utterances and skill. Be precise in mapping the utterance components to their corresponding plan elements, ensuring a high fidelity between the user's command and the generated plan.
